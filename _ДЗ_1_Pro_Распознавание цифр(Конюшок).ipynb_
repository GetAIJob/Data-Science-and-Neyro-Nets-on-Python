{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"\"ДЗ_1_Pro_Распознавание цифр(Конюшок).ipynb\"","provenance":[{"file_id":"1jcO-dVvdyp8KlNxrgnQ1Ltur2Uh16YBN","timestamp":1595856680164}],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1qiPejKiSx-tjMDDCrnf0r-rnNMFYyIBL","authorship_tag":"ABX9TyNaf24ff2z5qNPXfIQMFMba"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"R5wZfZsBJh_V","colab_type":"text"},"source":["# Light: Вариант 1"]},{"cell_type":"markdown","metadata":{"id":"QmKmX1atJ0gP","colab_type":"text"},"source":["Перепишите ноутбук по распознаванию рукописных цифр, восстановив следующие операции:\n","1. Импорт библиотек.\n","2. Загрузка базы mnist.\n","3. Нормирование и преобразование x_train и y_train.\n","4. Создание нейронной сети.\n","5. Обучение нейронной сети.\n","Можно смотреть в ноутбук с занятия, но код необходимо писать самостоятельно."]},{"cell_type":"markdown","metadata":{"id":"-XOtNqhnMUli","colab_type":"text"},"source":["## 1. Импорт библиотек"]},{"cell_type":"code","metadata":{"id":"gtZkzAzOKJ_E","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595865086682,"user_tz":-180,"elapsed":2094,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}}},"source":["from tensorflow.keras.datasets import mnist # Библиотека с базой Mnist\n","from tensorflow.keras import utils # Утилиты для to_categorical\n","from tensorflow.keras.models import Sequential # Класс создания модели Sequential\n","from tensorflow.keras.layers import Dense # Класс Dense - полносвязный слой\n","\n","# Для графики:\n","import matplotlib.pyplot as plt \n","from PIL import Image \n","\n","import numpy as np  # Кудаж без него\n","\n","# Добавил от себя автоматическую остановку обученя нейронки после того, как начинается обратный эффект )\n","from tensorflow.keras.callbacks import EarlyStopping"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oD2EAeK2MdWH","colab_type":"text"},"source":["## 2. Загрузка базы mnist"]},{"cell_type":"code","metadata":{"id":"cG8N47vvJsIC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1595865092371,"user_tz":-180,"elapsed":1521,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"b5d4a7e2-f023-411d-8a42-31304681e861"},"source":["(x_train_org, y_train_org), (x_test_org, y_test_org) = mnist.load_data() # Загрузка данных Mnist"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n","11493376/11490434 [==============================] - 0s 0us/step\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"g0NlAGuvMlTx","colab_type":"text"},"source":["## 3. Нормирование и преобразование x_train и y_train"]},{"cell_type":"code","metadata":{"id":"9AVqnva7Kl0P","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1595865095649,"user_tz":-180,"elapsed":944,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"d40e6832-73d8-4002-f6ca-a296feb6387d"},"source":["#Меняем формат входных картинок с 28х28 на 784х1\n","x_train = x_train_org.reshape(60000, 784)\n","x_test = x_test_org.reshape(10000, 784)\n","print(x_train_org.shape)  # Массив для обучения\n","print(x_test_org.shape) # Массив для проверки качества обучения"],"execution_count":3,"outputs":[{"output_type":"stream","text":["(60000, 28, 28)\n","(10000, 28, 28)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"arc69rCWKlSZ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595865098793,"user_tz":-180,"elapsed":779,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}}},"source":["#Нормализуем входные картинки\n","x_train = x_train.astype('float32') # преобразовываем x_train в тип float (цифры с плавающей точкой)\n","x_train = x_train / 255 # делим на 255, чтобы диапазон был от 0 до 1\n","x_test = x_test.astype('float32') # преобразовываем x_test в тип float (цифры с плавающей точкой)\n","x_test = x_test / 255 # делим на 255, чтобы диапазон был от 0 до 1"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"l_YZrGemQ_2p","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595865102159,"user_tz":-180,"elapsed":1267,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}}},"source":["# Преобразуем ответы в формат one_hot_encoding\n","y_train = utils.to_categorical(y_train_org, 10)\n","y_test = utils.to_categorical(y_test_org, 10)"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zUn165gySu3K","colab_type":"text"},"source":["## 4. Создание нейронной сети"]},{"cell_type":"code","metadata":{"id":"1UNVw8-hRjwF","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1595865105288,"user_tz":-180,"elapsed":692,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}}},"source":["model = Sequential() # Создаём сеть прямого распространения\n","model.add(Dense(800, input_dim=784, activation=\"relu\")) # Добавляем полносвязный слой \n","# на 800 нейронов с relu-активацией\n","model.add(Dense(400, activation=\"relu\")) # Добавляем полносвязный слой на 400 нейронов \n","#с relu-активацией\n","model.add(Dense(10, activation=\"softmax\")) # Добавляем ВЫХОДНОЙ слой на 10 нейронов \n","# с softmax-активацией. \n","# Эта функция преобразует все 10 значений выходного слоя таким образом, что сумма значений будет равна 1\n","# получим 10 значений, соответствующих вероятностям, с которыми модель определила ту или иную цифру"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"dVMx483hRjKU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1595865107955,"user_tz":-180,"elapsed":1060,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"2706b02b-198a-4b58-a7a0-2fa5fea7d617"},"source":["# Компилируем модель\n","model.compile(loss=\"categorical_crossentropy\", \n","              optimizer=\"adam\", \n","              metrics=[\"accuracy\"]) \n","\n","print(model.summary()) #Вывод структуры модели"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dense (Dense)                (None, 800)               628000    \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 400)               320400    \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 10)                4010      \n","=================================================================\n","Total params: 952,410\n","Trainable params: 952,410\n","Non-trainable params: 0\n","_________________________________________________________________\n","None\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"i5UfJ05wTv1Q","colab_type":"text"},"source":["## 5. Обучение нейронной сети"]},{"cell_type":"code","metadata":{"id":"NOTSkSwXT0LI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1595865146505,"user_tz":-180,"elapsed":35379,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"61fc4e86-5ce1-4e0c-d44a-57788377a493"},"source":["from tensorflow.keras.callbacks import EarlyStopping\n","\n","#Прекращение обучения, когда параметр val_loss перестает улучшаться - не удержался ))\n","#часа два разбирался с тем, как остановить перебор ))\n","\n","early_stopping = EarlyStopping(monitor = 'val_loss', \n","                               patience=2, # Число эпох, в течении которых должен ухудшаться val_loss\n","                               restore_best_weights = True)\n","\n","# fit - функция обучения нейронки\n","model.fit(x_train, y_train, # x_train, y_train - обучающая выборка, входные и выходные данные\n","          batch_size=128, # batch_size - размер батча, количество примеров, которое обрабатывает нейронка перед одним изменением весов\n","          epochs=15, # epochs - количество эпох, когда нейронка обучается на всех примерах выборки\n","          verbose=1, # verbose - 0 - не визуализировать ход обучения, 1 - визуализировать\n","          validation_split=0.2, \n","          callbacks=[early_stopping])\n"],"execution_count":8,"outputs":[{"output_type":"stream","text":["Epoch 1/15\n","375/375 [==============================] - 7s 19ms/step - loss: 0.2315 - accuracy: 0.9320 - val_loss: 0.1219 - val_accuracy: 0.9634\n","Epoch 2/15\n","375/375 [==============================] - 7s 18ms/step - loss: 0.0832 - accuracy: 0.9738 - val_loss: 0.0980 - val_accuracy: 0.9692\n","Epoch 3/15\n","375/375 [==============================] - 7s 18ms/step - loss: 0.0484 - accuracy: 0.9844 - val_loss: 0.0808 - val_accuracy: 0.9778\n","Epoch 4/15\n","375/375 [==============================] - 7s 18ms/step - loss: 0.0347 - accuracy: 0.9890 - val_loss: 0.0942 - val_accuracy: 0.9732\n","Epoch 5/15\n","375/375 [==============================] - 7s 18ms/step - loss: 0.0247 - accuracy: 0.9922 - val_loss: 0.0837 - val_accuracy: 0.9777\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<tensorflow.python.keras.callbacks.History at 0x7f8fb2fc91d0>"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"l-on16HwT0as","colab_type":"code","colab":{}},"source":["# После 5й эпохи ОБЫЧНО показатели обучения нейронки начинает \"колбасить\""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AWttz3-n0M-X","colab_type":"text"},"source":["## 6. Проверка обученности сети + кое что от себя"]},{"cell_type":"code","metadata":{"id":"BgsvPSzX4QJR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":340},"executionInfo":{"status":"ok","timestamp":1595865170588,"user_tz":-180,"elapsed":18409,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"3237f196-0f42-49b3-a4ea-b42d37e59971"},"source":["# От себя добавил цикл для распознавания всех тестовых вариантов и вывода картинок - ошибок распознавания\n","# До этого заметил, что если вовремя не остановить модель, то ошибок распознавания все больше и больше...\n","\n","arr_test = []\n","for i in range(1, 10000, 15):   # Выбираю каждую 15ю картинку\n","  x = x_test[i]\n","  x = np.expand_dims(x, axis=0)\n","  prediction = model.predict(x) # Распознаём наш пример\n","  prediction = np.argmax(prediction) # Получаем индекс самого большого элемента (это итоговая цифра, которую распознала сеть)\n","\n","  if prediction == y_test_org[i]:\n","    arr_test.append('True')\n","  else:\n","    arr_test.append('False')\n","    print('Индекс: ', i, 'Ответ нейросети: ' , prediction , '\\t' , 'Правильный ответ: ' , y_test_org[i])\n","#    plt.imshow(Image.fromarray(x_test_org[i]).convert('RGBA')) # Нарисуем картинку из тестового набора под номером n_rec\n","#    plt.show()\n","\n","from collections import Counter\n","print(Counter(arr_test))"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Индекс:  151 Ответ нейросети:  8 \t Правильный ответ:  9\n","Индекс:  241 Ответ нейросети:  8 \t Правильный ответ:  9\n","Индекс:  691 Ответ нейросети:  4 \t Правильный ответ:  8\n","Индекс:  1156 Ответ нейросети:  8 \t Правильный ответ:  7\n","Индекс:  1681 Ответ нейросети:  7 \t Правильный ответ:  3\n","Индекс:  2266 Ответ нейросети:  6 \t Правильный ответ:  1\n","Индекс:  2896 Ответ нейросети:  0 \t Правильный ответ:  8\n","Индекс:  3451 Ответ нейросети:  9 \t Правильный ответ:  7\n","Индекс:  3751 Ответ нейросети:  2 \t Правильный ответ:  7\n","Индекс:  3811 Ответ нейросети:  3 \t Правильный ответ:  2\n","Индекс:  4966 Ответ нейросети:  4 \t Правильный ответ:  7\n","Индекс:  6046 Ответ нейросети:  8 \t Правильный ответ:  3\n","Индекс:  6091 Ответ нейросети:  3 \t Правильный ответ:  9\n","Индекс:  6166 Ответ нейросети:  3 \t Правильный ответ:  9\n","Индекс:  6421 Ответ нейросети:  2 \t Правильный ответ:  3\n","Индекс:  7216 Ответ нейросети:  3 \t Правильный ответ:  0\n","Индекс:  7921 Ответ нейросети:  0 \t Правильный ответ:  8\n","Индекс:  8311 Ответ нейросети:  4 \t Правильный ответ:  6\n","Counter({'True': 649, 'False': 18})\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"MzG_7z65DpGR","colab_type":"text"},"source":["# Pro: Распознать рукописную цифру, созданную вами с помощью графического редактора\n","\n","Последовательность шагов:\n","1. В графическом редакторе рисуем произвольную цифру.\n","2. Сохраняем документ и загружаем его в Collaboratory.\n","3. С помощью функции image.load_img(path, target_size=(28, 28), color_mode = ‘grayscale’)\n","загружаем картинку в переменную.\n","4. С помощью функции image.img_to_array(img) преобразуем изображение в numpy-массив.\n","5. Выполняем инверсию цветов, нормирование и решейп массива.\n","6. Выполняем распознавание собственной рукописной цифры.\n","Реализуйте тот же алгоритм для написанной на листе от руки цифры (для этого необходимо сделать дополнительную предобработку изображения)."]},{"cell_type":"code","metadata":{"id":"cnzSkBP5Dn2o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":299},"executionInfo":{"status":"ok","timestamp":1595866569216,"user_tz":-180,"elapsed":1036,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"dacca410-c781-4621-e38d-3923e2ed20cd"},"source":["from keras.preprocessing.image import load_img\n","from keras.preprocessing.image import img_to_array\n","import numpy as np \n","\n","\n","image = load_img('/content/_8.png' , \n","                 target_size=(28, 28), \n","                 color_mode = 'grayscale')\n","\n","img_array = img_to_array(image)\n","img_array = img_array.reshape(1,28,28)\n","\n","#Нормализация\n","img_array = img_array.astype('float32') # преобразовываем x_train в тип float (цифры с плавающей точкой)\n","img_array = img_array / 255 # делим на 255, чтобы диапазон был от 0 до 1\n","img_array = 1 - img_array # инвертируем 1 в 0\n","\n","#Меняем формат входных картинок с 28х28 на 784х1\n","img_reshape = img_array.reshape(1, 784)\n","\n","print(img_array.shape)\n","print(img_reshape.shape)\n","\n","plt.imshow(img_array[0], cmap='Greys') #Отрисовка картинки\n","plt.show()"],"execution_count":73,"outputs":[{"output_type":"stream","text":["(1, 28, 28)\n","(1, 784)\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"eHUTqpu6W7Dh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1595866572533,"user_tz":-180,"elapsed":758,"user":{"displayName":"Ilia Konushok","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjgUrzLbotAvEh6mMq5H6nX20COBH_r_qBrlpfSYQ=s64","userId":"00607095919891895402"}},"outputId":"f16c5ef1-0e30-49f6-9693-08278a4e3231"},"source":["prediction = model.predict(img_reshape) #Распознаём наш пример\n","prediction = np.argmax(prediction) # Получаем индекс самого большого элемента \n","#(это итоговая цифра, которую распознала сеть)\n","print('Ответ нейросети: ' , prediction)"],"execution_count":74,"outputs":[{"output_type":"stream","text":["Ответ нейросети:  8\n"],"name":"stdout"}]}]}